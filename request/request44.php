<?php 
//https://cargotsi.mercurygate.net/MercuryGate/common/remoteService.jsp?userid=ProtoWSID&password=ProtoWebSvc2016!;

$oid_value = array(27682980122,27682980122,27683130115,27683519352,27684014987);

for ($i=0; $i < count($oid_value); $i++) { 
   $request[$i] = '<service-request>
                        <service-id>WebExtractTransportDeep</service-id>
                        <!-- The <request-id> tag is populated with a unique String (generated by caller); This number is used for troubleshooting purposes. -->
                        <request-id>20141204-Test-3</request-id>
                        <data>
                        <!-- The Oid value is found using the OidLookup request. -->
                          <oid>'.$oid_value[$i].'</oid>
                        </data>
                    </service-request>';
}



/*$request = '<service-request>
              <service-id>WebExtractTransportDeep</service-id>
              <!-- The <request-id> tag is populated with a unique String (generated by caller); This number is used for troubleshooting purposes. -->
              <request-id>20141204-Test-3</request-id>
              <data>
              <!-- The Oid value is found using the OidLookup request. -->
                <oid>27682980122</oid>
              </data>
            </service-request>';

$request2 = '<service-request>
              <service-id>WebExtractTransportDeep</service-id>
              <!-- The <request-id> tag is populated with a unique String (generated by caller); This number is used for troubleshooting purposes. -->
              <request-id>20141204-Test-3</request-id>
              <data>
              <!-- The Oid value is found using the OidLookup request. -->
                <oid>27683130115</oid>
              </data>
            </service-request>';

$request3 = '<service-request>
              <service-id>WebExtractTransportDeep</service-id>
              <!-- The <request-id> tag is populated with a unique String (generated by caller); This number is used for troubleshooting purposes. -->
              <request-id>20141204-Test-3</request-id>
              <data>
              <!-- The Oid value is found using the OidLookup request. -->
                <oid>27683519352</oid>
              </data>
            </service-request>';

$request4 = '<service-request>
              <service-id>WebExtractTransportDeep</service-id>
              <!-- The <request-id> tag is populated with a unique String (generated by caller); This number is used for troubleshooting purposes. -->
              <request-id>20141204-Test-3</request-id>
              <data>
              <!-- The Oid value is found using the OidLookup request. -->
                <oid>27683839442</oid>
              </data>
            </service-request>';


$request5 = '<service-request>
              <service-id>WebExtractTransportDeep</service-id>
              <!-- The <request-id> tag is populated with a unique String (generated by caller); This number is used for troubleshooting purposes. -->
              <request-id>20141204-Test-3</request-id>
              <data>
              <!-- The Oid value is found using the OidLookup request. -->
                <oid>27684014987</oid>
              </data>
            </service-request>';*/


/* $params1 = array(
                      "userid" => "ProtoWSID",
                      "password" => "ProtoWebSvc2016!",
                      "request" => urlencode($request[0])
                  );

foreach ($params1 as $k1 => $v1) {
              $postData1 .= $k1 . '=' . $v1 . '&';
          };

rtrim($postData1, '&');

$params2 = array(
                      "userid" => "ProtoWSID",
                      "password" => "ProtoWebSvc2016!",
                      "request" => urlencode($request[1])
                  );

foreach ($params2 as $k2 => $v2) {
              $postData2 .= $k2 . '=' . $v2 . '&';
          };

rtrim($postData2, '&');

$params3 = array(
                      "userid" => "ProtoWSID",
                      "password" => "ProtoWebSvc2016!",
                      "request" => urlencode($request[2])
                  );

foreach ($params3 as $k3 => $v3) {
              $postData3 .= $k3 . '=' . $v3 . '&';
          };

rtrim($postData3, '&');

$params4 = array(
                      "userid" => "ProtoWSID",
                      "password" => "ProtoWebSvc2016!",
                      "request" => urlencode($request[3])
                  );

foreach ($params4 as $k4 => $v4) {
              $postData4 .= $k4 . '=' . $v4 . '&';
          };

rtrim($postData4, '&');

$params5 = array(
                      "userid" => "ProtoWSID",
                      "password" => "ProtoWebSvc2016!",
                      "request" => urlencode($request[4])
                  );

foreach ($params5 as $k5 => $v5) {
              $postData5 .= $k5 . '=' . $v5 . '&';
          };

rtrim($postData5, '&');*/
for ($i=0; $i < count($oid_value); $i++) { 
  $params[$i] = array(
                      "userid" => "ProtoWSID",
                      "password" => "ProtoWebSvc2016!",
                      "request" => urlencode($request[$i])
                  );

foreach ($params[$i] as $k1 => $v1) {
              $postData[$i] .= $k1 . '=' . $v1 . '&';
          };

rtrim($postData[$i], '&');
}


// build the individual requests, but do not execute them
/*$ch_1 = curl_init('https://cargotsi.mercurygate.net/MercuryGate/common/remoteService.jsp?');
$ch_2 = curl_init('https://cargotsi.mercurygate.net/MercuryGate/common/remoteService.jsp?');
$ch_3 = curl_init('https://cargotsi.mercurygate.net/MercuryGate/common/remoteService.jsp?');
$ch_4 = curl_init('https://cargotsi.mercurygate.net/MercuryGate/common/remoteService.jsp?');
$ch_5 = curl_init('https://cargotsi.mercurygate.net/MercuryGate/common/remoteService.jsp?');

curl_setopt($ch_1, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch_1, CURLOPT_POST, count($postData[0]));
curl_setopt($ch_1, CURLOPT_POSTFIELDS, $postData[0]);

curl_setopt($ch_2, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch_2, CURLOPT_POST, count($postData[1]));
curl_setopt($ch_2, CURLOPT_POSTFIELDS, $postData[1]);

curl_setopt($ch_3, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch_3, CURLOPT_POST, count($postData[2]));
curl_setopt($ch_3, CURLOPT_POSTFIELDS, $postData[2]);

curl_setopt($ch_4, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch_4, CURLOPT_POST, count($postData[3]));
curl_setopt($ch_4, CURLOPT_POSTFIELDS, $postData[3]);

curl_setopt($ch_5, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch_5, CURLOPT_POST, count($postData[4]));
curl_setopt($ch_5, CURLOPT_POSTFIELDS, $postData[4]);*/
$mh = curl_multi_init();
for ($i=0; $i < count($oid_value); $i++) {
    $ch_[$i] = curl_init('https://cargotsi.mercurygate.net/MercuryGate/common/remoteService.jsp?');
    curl_setopt($ch_[$i], CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch_[$i], CURLOPT_POST, count($postData[$i]));
    curl_setopt($ch_[$i], CURLOPT_POSTFIELDS, $postData[$i]);
    curl_multi_add_handle($mh, $ch_[$i]);
}

    /*curl_multi_add_handle($mh, $ch_1);
    curl_multi_add_handle($mh, $ch_2);
    curl_multi_add_handle($mh, $ch_3);
    curl_multi_add_handle($mh, $ch_4);
    curl_multi_add_handle($mh, $ch_5);*/

// build the multi-curl handle, adding both $ch
  
// execute all queries simultaneously, and continue when all are complete
  $running = null;
  do {
    curl_multi_exec($mh, $running);
  } while ($running);

//close the handles
for ($i=0; $i < count($oid_value); $i++) {
    curl_multi_remove_handle($mh, $ch_[$i]);
}

curl_multi_close($mh);
  
// all of our requests are done, we can now access the results
/*$response_1 = curl_multi_getcontent($ch_1);
$response_2 = curl_multi_getcontent($ch_2);
$response_3 = curl_multi_getcontent($ch_3);
$response_4 = curl_multi_getcontent($ch_4);
$response_5 = curl_multi_getcontent($ch_5);*/

for ($i=0; $i < count($oid_value); $i++) {
   $response_[$i] = curl_multi_getcontent($ch_[$i]);
}

//echo base64_decode($response_1).base64_decode($response_2).base64_decode($response_3).base64_decode($response_4).base64_decode($response_5); // output results
//echo base64_decode($response_[0]).base64_decode($response_[1]).base64_decode($response_[2]).base64_decode($response_[3]).base64_decode($response_[4]); // output results
$xml_answer = '';
for ($i=0; $i < count($oid_value); $i++) {
  $xml_answer .= ''.base64_decode($response_[$i]).'';
}
//echo base64_decode($response_[0]);
echo $xml_answer;


?>